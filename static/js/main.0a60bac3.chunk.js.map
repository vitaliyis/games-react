{"version":3,"sources":["img/vetal.jpg","components/Navbar.js","components/Loto/Scoreboard.js","utils/createRandomCard.js","components/Loto/modals/ModalGameOver.js","components/Loto/cards/CardPeople.js","components/Loto/cards/CardComputer.js","components/Loto/cards/CardsList.js","utils/sound.js","components/Loto/cards/CardsContainer.js","redux/reducers/loto/loto.actions.js","redux/reducers/loto/loto.types.js","components/Loto/Loto.js","components/About.js","components/Home.js","components/NotFound.js","App.js","serviceWorker.js","redux/reducers/loto/loto.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["module","exports","Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","exact","Scoreboard","props","second","resetGame","randomNumber","onClick","getRandomItems","condition","quanityZero","quanityOne","itemsCard","count0","count1","i","value","Math","floor","random","push","getRandomCardMap","result","quantityColumnsCard","count6","count3","ceil","getRandomColumns","forEach","item","newResult","randomInteger","min","max","rand","getRandomCard","bag","randomIntegerWithoutRepeat","from","number","some","element","card","map","newCard","index","transformForCard","getCards","quantity","ModalGameOver","winner","updateGameOver","setStartGame","useState","classNameModal","setClassNameModal","closeModal","setTimeout","useEffect","tabIndex","role","data-dismiss","aria-hidden","CardPeople","valuesCards","checkCardPeople","cardId","key","CardComputer","CardsList","cardsPeople","cardsComputer","quantityCardsArr","_","name","audioCtx","window","AudioContext","webkitAudioContext","beep","frequency","volume","duration","oscillator","createOscillator","gainNode","createGain","connect","destination","gain","start","stop","state","quantityCards","lotoReducer","speedGame","gameOver","dispatch","updateCardsPeople","payload","console","log","updateCardsComputer","setSecond","setRandomNumber","timerId","setTimerId","numberToArray","timer","usedNumber","tempNumber","localTimerId","setInterval","startGame","clearInterval","setQuantityCards","data","setSpeedGame","setCardsPeople","quanityCards","setCardsComputer","onChange","event","target","Number","htmlFor","e","preventDefault","About","src","myPhoto","alt","Home","NotFound","App","path","component","Loto","Boolean","location","hostname","match","initialState","cards","length","checkOnEmptyCards","every","checkMissedNumber","action","cardsForPeople","cardsForComputer","localGameOver","localWinner","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","navbarToggler","querySelectorAll","navLink","addEventListener","classList","remove"],"mappings":"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","file":"static/js/main.0a60bac3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vetal.fcfaaffa.jpg\";","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\r\n        <NavLink className=\"navbar-brand\" to=\"/\">GAMES</NavLink>\r\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" to=\"/\" exact>Home</NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" to=\"/about\">About</NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" to=\"/loto\">Loto</NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}","import React from 'react'\r\n\r\nconst Scoreboard = props => {\r\n  const {second, resetGame, randomNumber} = props\r\n  return (\r\n    <div className=\"scoreboard-loto\">\r\n      <div className=\"d-flex justify-content-between align-items-center\">\r\n        <button\r\n          className=\"btn btn-secondary btn-sm\"\r\n          onClick={resetGame}\r\n        >Сброс игры</button>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"mr-sm-5 mr-3\">Таймер:</div>\r\n          <div className=\"scoreboard-loto-time\">{second}</div>\r\n        </div>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"mr-sm-5 mr-3\">Число:</div>\r\n          <div className=\"scoreboard-loto-number\">{randomNumber}</div>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-primary btn-sm invisible d-none d-sm-block\"\r\n        >Сброс игры</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scoreboard","const getRandomColumns = () => {\r\n  const quantityColumnsCard = []\r\n  let count6 = 0\r\n  let count3 = 0\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    let value = Math.ceil(Math.random()*2)\r\n    value === 1 ? count3++ : count6++\r\n    value = count3 > 3 ? 2 : value\r\n    value = count6 > 6 ? 1 : value\r\n    quantityColumnsCard.push(value)\r\n  }\r\n  // console.log('quantityColumnsCard ', quantityColumnsCard)\r\n  return quantityColumnsCard\r\n}\r\n\r\nconst getRandomItems = (condition) => {\r\n  let quanityZero = null\r\n  let quanityOne = null\r\n\r\n  if (condition === 1) {\r\n    quanityZero = 2\r\n    quanityOne = 1\r\n  } else {\r\n    quanityZero = 1\r\n    quanityOne = 2}\r\n\r\n  const itemsCard = []\r\n  let count0 = 0\r\n  let count1 = 0\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    let value = Math.floor(Math.random()*2)   // либо 0 либо 1\r\n    value === 0 ? count0++ : count1++\r\n    value = count0 > quanityZero ? 1 : value\r\n    value = count1 > quanityOne ? 0 : value\r\n    // count0 > quanityZero ? value = 1 : value = value\r\n    // count1 > quanityOne ? value = 0 : value = value\r\n    itemsCard.push(value)\r\n  }\r\n  return itemsCard\r\n}\r\n\r\nconst getRandomCardMap = () => {\r\n  const result = []\r\n  const quantityColumnsCard = getRandomColumns()\r\n  quantityColumnsCard.forEach(item => {\r\n    item === 1 ? result.push(getRandomItems(1)) : result.push(getRandomItems(2))\r\n  })\r\n\r\n  // трансформируем массив массивов в один массив\r\n  const newResult = []\r\n  result.forEach(item => {\r\n    item.forEach(item => {\r\n      newResult.push(item)\r\n    })\r\n  })\r\n\r\n  return newResult\r\n}\r\n\r\nexport const randomInteger = (min, max) => {\r\n  // случайное число от min до (max+1)\r\n  let rand = min + Math.random() * (max + 1 - min);\r\n  return Math.floor(rand);\r\n}\r\n\r\nconst transformForCard = (card) => {\r\n  const map = [0, 9, 18, 1, 10, 19, 2, 11, 20, 3, 12, 21, 4, 13, 22,\r\n    5, 14, 23, 6, 15, 24, 7, 16, 25, 8, 17, 26]\r\n  const newCard = []\r\n  card.forEach((item, index) => {\r\n    newCard[map[index]] = item\r\n  })\r\n  // console.log('newCard ', newCard)\r\n  return newCard\r\n}\r\n\r\nconst getRandomCard = () => {\r\n  const bag = []\r\n\r\n  const randomIntegerWithoutRepeat = (from, to) => {\r\n    let number = randomInteger(from, to)\r\n    while(bag.some(element => element === number)) {\r\n      number = randomInteger(from, to)\r\n    }\r\n\r\n    bag.push(number)\r\n    return number\r\n\r\n  }\r\n\r\n  const card =  getRandomCardMap().map((item, index) => {\r\n    if (item === 1 && index >= 0 && index < 3) {return randomIntegerWithoutRepeat(1, 9)}\r\n    if (item === 1 && index >= 3 && index < 6) {return randomIntegerWithoutRepeat(10, 19)}\r\n    if (item === 1 && index >= 6 && index < 9) {return randomIntegerWithoutRepeat(20, 29)}\r\n    if (item === 1 && index >= 9 && index < 12) {return randomIntegerWithoutRepeat(30, 39)}\r\n    if (item === 1 && index >= 12 && index < 15) {return randomIntegerWithoutRepeat(40, 49)}\r\n    if (item === 1 && index >= 15 && index < 18) {return randomIntegerWithoutRepeat(50, 59)}\r\n    if (item === 1 && index >= 18 && index < 21) {return randomIntegerWithoutRepeat(60, 69)}\r\n    if (item === 1 && index >= 21 && index < 24) {return randomIntegerWithoutRepeat(70, 79)}\r\n    if (item === 1 && index >= 24 && index < 27) {return randomIntegerWithoutRepeat(80, 90)}\r\n\r\n    return 0\r\n  })\r\n  // console.log('card ', card)\r\n\r\n  return transformForCard(card)\r\n}\r\n\r\nexport const getCards = (quantity) => {\r\n  let result = []\r\n  for (let i = 0; i < quantity; i++) {\r\n    result = [...result, getRandomCard()]\r\n  }\r\n  return result\r\n}","import React, {useState, useEffect} from 'react'\r\n\r\nconst ModalGameOver = (props) => {\r\n  const {winner, updateGameOver, setStartGame} = props\r\n  const [classNameModal, setClassNameModal] = useState(\"modal fade d-block\")\r\n\r\n  const closeModal = () => {\r\n    setTimeout(() => {\r\n      updateGameOver(false)\r\n      setStartGame(false)\r\n    }, 1000)\r\n    setClassNameModal(\"modal fade d-block\")\r\n  }\r\n\r\n  useEffect(() => {\r\n    setClassNameModal(\"modal fade d-block show\")\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classNameModal} id=\"modalGameOver\" tabIndex=\"-1\" role=\"dialog\">\r\n      <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">Игра окончена!</h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              data-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n              onClick={closeModal}\r\n            >\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body text-center\">\r\n            <h2>{winner}</h2>\r\n          </div>\r\n          <div className=\"modal-footer justify-content-center\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-dismiss=\"modal\"\r\n              onClick={closeModal}\r\n            >Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalGameOver","import React from 'react'\r\n\r\nconst CardPeople = (props) => {\r\n  const {valuesCards, checkCardPeople, cardId} = props\r\n  // console.log('valuesCards', valuesCards)\r\n\r\n  return(\r\n    <div className=\"card-loto card-loto-people\">\r\n      {valuesCards ? valuesCards.map(item => {\r\n          return (\r\n            <div\r\n              key={Math.random()}\r\n              onClick={() => {checkCardPeople(item, cardId)}}\r\n            >{item ? item : ''}</div>\r\n          )\r\n      }) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardPeople","import React from 'react'\r\n\r\nconst CardComputer = (props) => {\r\n  const {valuesCards} = props\r\n  // console.log('CardComputer valuesCards', valuesCards)\r\n\r\n  return(\r\n    <div className=\"card-loto loto-color-border\">\r\n      {valuesCards ? valuesCards.map(item => {\r\n        return (\r\n          <div key={Math.random()}>{item ? item : ''}</div>\r\n        )\r\n      }) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardComputer","import React from 'react'\r\nimport CardPeople from \"./CardPeople\";\r\nimport CardComputer from \"./CardComputer\";\r\n\r\nconst CardsList = props => {\r\n  const {cardsPeople, cardsComputer, quantityCardsArr, checkCardPeople} = props\r\n  return(\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        {cardsPeople ? quantityCardsArr.map((_, index) => <CardPeople\r\n          cardId={index}\r\n          name=\"people\"\r\n          key={Math.random()}\r\n          valuesCards={cardsPeople[index]}\r\n          checkCardPeople={checkCardPeople}\r\n        />) : null}\r\n      </div>\r\n      <div className=\"col-md-6 mt-md-0 mt-3\">\r\n        {cardsComputer ? quantityCardsArr.map((_, index) => <CardComputer\r\n          name=\"computer\"\r\n          key={Math.random()}\r\n          valuesCards={cardsComputer[index]}\r\n        />) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardsList","const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\nexport function beep(frequency, type, volume, duration) {\r\n  var oscillator = audioCtx.createOscillator();\r\n  var gainNode = audioCtx.createGain();\r\n\r\n  oscillator.connect(gainNode);\r\n  gainNode.connect(audioCtx.destination);\r\n\r\n  gainNode.gain.value = volume;\r\n  oscillator.frequency.value = frequency;\r\n  oscillator.type = type;\r\n\r\n  oscillator.start();\r\n\r\n  setTimeout(\r\n    function(){\r\n      oscillator.stop();\r\n    },\r\n    duration\r\n  );\r\n};","import React, {useState, useEffect} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  updateCardsComputer,\r\n  updateCardsPeople, updateGameOver\r\n} from \"../../../redux/reducers/loto/loto.actions\";\r\nimport Scoreboard from \"../Scoreboard\";\r\nimport {randomInteger} from \"../../../utils/createRandomCard\";\r\nimport ModalGameOver from \"../modals/ModalGameOver\";\r\nimport CardsList from \"./CardsList\";\r\nimport {beep} from \"../../../utils/sound\";\r\n\r\nconst CardsContainer = (props) => {\r\n  const {cardsPeople, cardsComputer, updateCardsPeople, setStartGame,\r\n    updateCardsComputer, speedGame, gameOver, updateGameOver, winner} = props\r\n\r\n  const [second, setSecond] = useState(speedGame)\r\n  const [randomNumber, setRandomNumber] = useState(randomInteger(1, 90))\r\n  const [timerId, setTimerId] = useState(null)\r\n\r\n  const quantityCardsArr = []\r\n  const numberToArray = () => {\r\n    for (let i = 1; i <= props.quantityCards; i++) {\r\n      quantityCardsArr.push(i)\r\n    }\r\n  }\r\n  numberToArray()\r\n\r\n  const checkCardPeople = (value, id) => {\r\n    if (value === randomNumber) {\r\n      beep(303, 'square', 0.15, 70)\r\n      updateCardsPeople(value, id)\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    // идет проверка на карточках компьютера\r\n    beep(1127, 'square', 0.15, 70)\r\n    updateCardsComputer(randomNumber)\r\n    const usedNumber = []\r\n    usedNumber.push(randomNumber)\r\n    let i = speedGame\r\n    let tempNumber = randomNumber\r\n    const localTimerId = setInterval(\r\n      () => {\r\n        if (i - 1 === speedGame) {\r\n          while (usedNumber.some(item => item === tempNumber)) {\r\n            tempNumber = randomInteger(1, 90)\r\n          }\r\n          usedNumber.push(tempNumber)\r\n          // console.log('usedNumber => ', usedNumber)\r\n          updateCardsComputer(tempNumber)\r\n          setRandomNumber(tempNumber)\r\n          beep(1127, 'square', 0.15, 70)\r\n        }\r\n        setSecond(--i)\r\n        if (!i) {\r\n          i = speedGame + 1\r\n        }\r\n      }\r\n      , 1000);\r\n    setTimerId(localTimerId)\r\n    return localTimerId\r\n  }\r\n\r\n  // const tripleSound = () => {\r\n  //   beep(200, 'square', 0.15, 70)\r\n  //   setTimeout(() => beep(250, 'square', 0.15, 70), 150)\r\n  //   setTimeout(() => beep(303, 'square', 0.15, 70), 300)\r\n  // }\r\n\r\n  useEffect(() => {\r\n    const timer = startGame()\r\n    return () => {\r\n      clearInterval(timer)\r\n      setStartGame(false)\r\n    }\r\n  }, [])\r\n\r\n\r\n  const resetGame = () => {\r\n    clearInterval(timerId)\r\n    if (!gameOver) {\r\n      setStartGame(false)\r\n      return\r\n    }\r\n    setTimeout(() => beep(218, 'square', 0.15, 700), 500)\r\n  }\r\n\r\n\r\n  return(\r\n    <>\r\n      <Scoreboard\r\n        second={second}\r\n        randomNumber={randomNumber}\r\n        resetGame={resetGame}\r\n      />\r\n      <CardsList\r\n        cardsPeople={cardsPeople}\r\n        quantityCardsArr={quantityCardsArr}\r\n        cardsComputer={cardsComputer}\r\n        checkCardPeople={checkCardPeople}\r\n      />\r\n      {gameOver ? resetGame() : null}\r\n      {gameOver ?\r\n        <ModalGameOver\r\n        winner={winner}\r\n        updateGameOver={updateGameOver}\r\n        setStartGame={setStartGame}\r\n      /> : null}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n    quantityCards: state.lotoReducer.quantityCards,\r\n    cardsPeople: state.lotoReducer.cardsPeople,\r\n    cardsComputer: state.lotoReducer.cardsComputer,\r\n    speedGame: state.lotoReducer.speedGame,\r\n    gameOver: state.lotoReducer.gameOver,\r\n    winner: state.lotoReducer.winner\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateCardsPeople: (number, card) => dispatch(updateCardsPeople({number, card})),\r\n    updateCardsComputer: number => dispatch(updateCardsComputer(number)),\r\n    updateGameOver: value => dispatch(updateGameOver(value))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardsContainer)","import {\r\n  SET_CARDS_COMPUTER,\r\n  SET_CARDS_PEOPLE,\r\n  SET_QUANTITY_CARDS, SET_SPEED_GAME, SET_START_GAME, UPDATE_CARDS_COMPUTER,\r\n  UPDATE_CARDS_PEOPLE, UPDATE_GAME_OVER\r\n} from \"./loto.types\";\r\n\r\nexport const setQuantityCards = payload => {\r\n  return {\r\n    type: SET_QUANTITY_CARDS,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const setSpeedGame = payload => {\r\n  return {\r\n    type: SET_SPEED_GAME,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const setStartGame = payload => {\r\n  return {\r\n    type: SET_START_GAME,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const updateCardsPeople = payload => {\r\n  console.log('payload', payload)\r\n  return {\r\n    type: UPDATE_CARDS_PEOPLE,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const updateCardsComputer = payload => {\r\n  return {\r\n    type: UPDATE_CARDS_COMPUTER,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const updateGameOver = payload => {\r\n  return {\r\n    type: UPDATE_GAME_OVER,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const setCardsPeople = payload => {\r\n  console.log('payload', payload)\r\n  return {\r\n    type: SET_CARDS_PEOPLE,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const setCardsComputer = payload => {\r\n  return {\r\n    type: SET_CARDS_COMPUTER,\r\n    payload\r\n  }\r\n}","export const SET_QUANTITY_CARDS = \"SET_QUANTITY_CARDS\"\r\nexport const SET_SPEED_GAME = \"SET_SPEED_GAME\"\r\nexport const SET_START_GAME = \"SET_START_GAME\"\r\nexport const UPDATE_CARDS_PEOPLE = \"UPDATE_CARDS_PEOPLE\"\r\nexport const UPDATE_CARDS_COMPUTER = \"UPDATE_CARDS_COMPUTER\"\r\nexport const UPDATE_GAME_OVER = \"UPDATE_GAME_OVER\"\r\nexport const SET_CARDS_PEOPLE = \"SET_CARDS_PEOPLE\"\r\nexport const SET_CARDS_COMPUTER = \"SET_CARDS_COMPUTER\"","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport CardsContainer from \"./cards/CardsContainer\";\r\nimport {\r\n  setCardsComputer, setCardsPeople, setQuantityCards, setSpeedGame,\r\n  setStartGame\r\n} from \"../../redux/reducers/loto/loto.actions\";\r\n\r\nconst Loto = (props) => {\r\n  const {quantityCards, speedGame, startGame, setQuantityCards,\r\n    setSpeedGame, setStartGame, setCardsPeople, setCardsComputer} = props\r\n\r\n  const quantityCardsSelect = [1, 2]\r\n  const speedGameSelect = [1, 2, 3, 4, 5]\r\n\r\n  const onChange = event => {\r\n    switch (event.target.name) {\r\n      case \"quantityCard\":\r\n        setQuantityCards(Number(event.target.value))\r\n        break\r\n\r\n      case \"speedGame\":\r\n        setSpeedGame(Number(event.target.value))\r\n        break\r\n\r\n      default: break\r\n    }\r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault()\r\n    setStartGame(true)\r\n    setCardsPeople(quantityCards)\r\n    setCardsComputer(quantityCards)\r\n  }\r\n\r\n\r\n  return(\r\n    <div className=\"loto-wrap\">\r\n      {/*<ModalGameOver/>*/}\r\n      {!startGame ?\r\n      <div className=\"card mt-5 ml-auto mr-auto\">\r\n        <h5 className=\"card-header\">Сделайте выбор</h5>\r\n        <div className=\"card-body\">\r\n          <form>\r\n            <div className=\"form-group row\">\r\n              <label htmlFor=\"quantityCard\" className=\"col-sm-6 col-form-label\">Количество карточек:</label>\r\n              <div className=\"col-sm-6\">\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"quantityCard\"\r\n                  name=\"quantityCard\"\r\n                  onChange={onChange}\r\n                  value={quantityCards}\r\n                >{quantityCardsSelect.map(item => <option key={Math.random()}>{item}</option>)}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n              <label htmlFor=\"speedGame\" className=\"col-sm-6 col-form-label\">Скорость игры (в секундах):</label>\r\n              <div className=\"col-sm-6\">\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"speedGame\"\r\n                  name=\"speedGame\"\r\n                  onChange={onChange}\r\n                  value={speedGame}\r\n                >{speedGameSelect.map(item => <option key={Math.random()}>{item}</option>)}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <button\r\n              className=\"btn btn-primary w-100 mt-4\"\r\n              onClick={onSubmit}\r\n            >Начать игру</button>\r\n          </form>\r\n\r\n        </div>\r\n      </div> : <CardsContainer setStartGame={setStartGame}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    quantityCards: state.lotoReducer.quantityCards,\r\n    speedGame: state.lotoReducer.speedGame,\r\n    startGame: state.lotoReducer.startGame\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setQuantityCards: data => dispatch(setQuantityCards(data)),\r\n    setSpeedGame: data => dispatch(setSpeedGame(data)),\r\n    setStartGame: data => dispatch(setStartGame(data)),\r\n    setCardsPeople: quanityCards => dispatch(setCardsPeople(quanityCards)),\r\n    setCardsComputer: quantityCards => dispatch(setCardsComputer(quantityCards))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Loto)","import React, {useEffect} from 'react'\r\nimport myPhoto from '../img/vetal.jpg'\r\n\r\nexport const About = () => {\r\n  console.log('About')\r\n  useEffect(() => {\r\n    console.log('useEffect')\r\n    return () => console.log('Clear about')\r\n  }, [])\r\n  return(\r\n    <div className=\"card mb-3 mt-4\">\r\n      <div className=\"row no-gutters\">\r\n        <div className=\"col-md-4\">\r\n          <img src={myPhoto} className=\"card-img\" alt=\"...\"/>\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">Автор проекта: Виталий.</h5>\r\n            <p className=\"card-text\">Один из самых крутых фронт-енд (Реакт) разработчиков ))).</p>\r\n            <p className=\"card-text\"><small className=\"text-muted\">Last updated 17.04.2020</small></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport const Home = (props) => {\r\n  console.log('Home')\r\n  return(\r\n    <div>\r\n      <h1>Всем привет! :)</h1>\r\n      <p>Представляю вашему вниманию игру \"Лото\". Эта та самая настольная игра,\r\n        в которую вы играли в детстве. С такими же правилами. Но с небольшими отличиями:</p>\r\n      <p>Вашим противником является компьютер, у которого есть лишь одно преимущество:\r\n        он никогда не ошибается! )))</p>\r\n      <p>Перед игрой Вы должны выбрать количество карточек и скорость подачи случайных чисел.</p>\r\n      <p>На табло над карточками Вы увидете таймер, который отсчитывает секунды и число,\r\n        выбранное случайно.</p>\r\n      <p>Вы должны успеть отметить число на своей карточке за время, которое Вам дается.</p>\r\n      <p>Если Вы не успеваете это сделать, то есть хотя бы пропустили одно число,\r\n        то Вы считаетесь проигравшим так, как играть дальше смысла нет потому, что показанные на табло\r\n        случайные числа не повторяются.</p>\r\n      <p>В случае победы или поражения Вы будете уведомлены длинным звуковым сигналом и\r\n        появлением уведомления.</p>\r\n      <p>Когда начнется игра Ваши карточки (у которых серые края) находятся слева, а карточки компьютера\r\n        (края цвета хаки) справа.</p>\r\n      <p>Если Вы играете двумя или тремя карточками, то числа на Ваших карточках могут повторяться\r\n      и надо их успеть отметить на всех карточках, но в пределах одной карточки числа не повторяются.</p>\r\n      <p>Эта игра, как показала практика ))) очень хорошо развивает Ваше внимание и реакцию.\r\n        Поэтому Друзья я хочу пожелать Вам приятного и полезного времяпрепровождения!</p>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport const NotFound = () => {\r\n  return(\r\n    <div className=\"text-center\">\r\n      <h1 className=\"mt-5\">404 NOT FOUND</h1>\r\n      <h2>Excuse me, but such a page does not exist on this site.</h2>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport {Route, Switch} from 'react-router-dom'\nimport {Navbar} from \"./components/Navbar\";\nimport Loto from \"./components/Loto/Loto\";\nimport {About} from \"./components/About\";\nimport {Home} from \"./components/Home\";\nimport {NotFound} from \"./components/NotFound\";\n\nfunction App() {\n  return (\n    <>\n      <Navbar/>\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/loto\"  component={Loto}/>\n          <Route path=\"/about\"  component={About}/>\n          <Route component={NotFound}/>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {getCards} from \"../../../utils/createRandomCard\";\r\nimport {\r\n  SET_CARDS_COMPUTER, SET_CARDS_PEOPLE,\r\n  SET_QUANTITY_CARDS, SET_SPEED_GAME, SET_START_GAME, UPDATE_CARDS_COMPUTER,\r\n  UPDATE_CARDS_PEOPLE, UPDATE_GAME_OVER\r\n} from \"./loto.types\";\r\n\r\nconst initialState = {\r\n  quantityCards: 1,\r\n  speedGame: 3,\r\n  startGame: false,\r\n  gameOver: false,\r\n  cardsPeople: [],\r\n  cardsComputer: [],\r\n  winner: null,\r\n  randomNumber: null\r\n}\r\n\r\nconst updateCardsPeople = (cards, number, card) => {\r\n  let result = []\r\n  for (let i = 0; i < cards.length; i++) {\r\n    result.push(cards[i].map(item => item === number && i === card ? 0 : item))\r\n  }\r\n  // console.log('result => ', result)\r\n  return result\r\n}\r\n\r\nconst updateCardsComputer = (cards, number) => {\r\n  let result = []\r\n  for (let i = 0; i < cards.length; i++) {\r\n    result.push(cards[i].map(item => item === number ? 0 : item))\r\n  }\r\n  // console.log('updateCardsComputer result => ', result)\r\n  return result\r\n}\r\n\r\nconst checkOnEmptyCards = cards => {\r\n  if (cards.every(item => item.every(item => item === 0))) {\r\n    // console.log('Game over!!!')\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nconst checkMissedNumber = (cards, number) => {\r\n  return cards.some(item => item.some(item => item === number))\r\n}\r\n\r\nconst lotoReducer = (state = initialState, action) => {\r\n  const {payload} = action\r\n  switch (action.type) {\r\n    case SET_QUANTITY_CARDS:\r\n      return {\r\n        ...state,\r\n        quantityCards: payload\r\n      }\r\n\r\n    case SET_SPEED_GAME:\r\n      return {\r\n        ...state,\r\n        speedGame: payload\r\n      }\r\n\r\n    case SET_START_GAME:\r\n      return {\r\n        ...state,\r\n        startGame: payload\r\n      }\r\n\r\n    case UPDATE_CARDS_PEOPLE:\r\n      const cardsForPeople = updateCardsPeople(state.cardsPeople, payload.number, payload.card)\r\n      return {\r\n        ...state,\r\n        cardsPeople: cardsForPeople,\r\n        gameOver: checkOnEmptyCards(cardsForPeople),\r\n        winner: checkOnEmptyCards(cardsForPeople) ? 'Вы победили!' : null\r\n      }\r\n\r\n    case UPDATE_CARDS_COMPUTER:\r\n      const cardsForComputer = updateCardsComputer(state.cardsComputer, payload)\r\n\r\n      let localGameOver = checkOnEmptyCards(cardsForComputer)\r\n      if (!localGameOver) {\r\n        localGameOver = checkMissedNumber(state.cardsPeople, state.randomNumber)\r\n      }\r\n\r\n      let localWinner = checkOnEmptyCards(cardsForComputer) ? 'Вы проиграли!' : null\r\n      if (!localWinner) {\r\n        localWinner = checkMissedNumber(state.cardsPeople, state.randomNumber) ? 'Вы проиграли!' : null\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        cardsComputer: cardsForComputer,\r\n        randomNumber: payload,\r\n        gameOver: localGameOver,\r\n        winner: localWinner\r\n        // gameOver: checkOnEmptyCards(cardsForComputer),\r\n        // winner: checkMissedNumber(state.cardsPeople, state.randomNumber) ? 'Вы проиграли!' : null\r\n        // winner: checkOnEmptyCards(cardsForComputer) ? 'Вы проиграли!' : null\r\n      }\r\n\r\n    case SET_CARDS_PEOPLE:\r\n      return {\r\n        ...state,\r\n        cardsPeople: getCards(payload)\r\n      }\r\n\r\n    case SET_CARDS_COMPUTER:\r\n      return {\r\n        ...state,\r\n        cardsComputer: getCards(payload)\r\n      }\r\n\r\n    case UPDATE_GAME_OVER:\r\n      return {\r\n        ...state,\r\n        gameOver: payload\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default lotoReducer","import {combineReducers} from 'redux'\r\nimport lotoReducer from \"./reducers/loto/loto.reducer\";\r\n\r\nexport default combineReducers({\r\n  lotoReducer\r\n})","import {applyMiddleware, createStore} from 'redux'\r\nimport rootReducer from './rootReducer'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store =createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './index.css';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <HashRouter>\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst navbarToggler = document.getElementById('navbarTogglerDemo01')\nconst navLinks = document.querySelectorAll(\".nav-link\")\nnavLinks.forEach(navLink => navLink.addEventListener('click', () => {\n  navbarToggler.classList.remove('show')\n}))\n"],"sourceRoot":""}